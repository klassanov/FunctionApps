
---------------------------------------------------------- AZURE FUNCTIONS: PART 1 ----------------------------------------------
Slide
------------
- Who am I


Slide
------------
 - Azure Functions, runtime version 4, Part 1
 - Presentation Contents


Slide
------------
Contents:
 - What are Azure functions?
	- FaaS (function as a service platform): a platform for running code (functions) in response to events, event-driven model



 Slide
------------
 - What is serverless (3 main things)
	
	- Servers are managed for U, U need to provide your code only
		- Servers are abstracted away
	
	- Per-second billing model, consumption-based cost-plan
		- Only pay when your code runs: no run, no cost

	- Automatic scale in response to demand
		- Multiple servers meet the demand

Summarizing: Simpler, Cheaper and More scalable compared to traditional development compared to the traditional approach of creating an application and
hosting it on a dedicated VM


Demo
-----------
- Demo on the Azure Portal directly, first create a function app
- Resources created: 
	- FunctionApp itself
	- AppServicePlan: hosting consumption plan that governs the billing
	- Storage account
	- App Insignt instance

- What is a function app



 Slide
------------
 - Different hosting models (plans), serverless is only one of them, it is related to the consumption plan



  Slide
------------
 - Why use Azure Functions -> Benefits
	- fast development
	- reduce costs
	- automatic scale


Slide
-----------
 - Use case scenarios in which functions are a great fit



Slide
---------
 Development options overview:
	- Development languages: C#, JavaScript, Java, Python, Powershell, F# and....
	- Visual Studio: debug and test locally
	- Visual Studio Code
	- In-Portal: good for Demos, PoC, Experiments
	- Azure Core Tools
	- More?
	- What do we need to install in order to be able to develop in each case

Demo
---------
  - Develop a Function App in Visual Studio
  - Possible languages: C#, F#, Javascript
  - Tools to install: In VS during installation Azure Development Workload, put a screenshot. It includes the azure storage emulator which locally emulates
    a storage account needed for the function to run
  - Need a function app project and then we can add functions to it 
  - Files in Visual studio
    - host.json: 
	- local.settings.json: local settings, typically not checked in source control as it might contain sensitive data
	- Referencing Microsoft.NET.Sdk.Functions nuget package
	- After compilation, explore the compiled code .net standard dll and the function.json file in the Function's folder are generated and the function is ready for publishing on Azure
  
  - Example of Unit tests in Visual Studio 

Slide
---------
  - General development concepts
	- Triggers: event-driven, examples: http trigger, timer, message (queue)
	- Bindings: queue, integrate with different sources and destinations without having to write boilerplate code to manage the connection

Demo (Azure Function Core Tools and Command Line)
----------------------------------
 - Use the Azure Function Core Tools and the command line
 - Things to install: Azure Function Core Tools, can be installed on all platforms (https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4%2Cwindows%2Ccsharp%2Cportal%2Cbash)
 - Azure Function Core Tools contains the functions runtime and provides a CLI for creating Function Apps, Adding functions, Deploying to Azure
 - The Core Tools allow development without visual studio and with any text editor U like

   Steps: 
 1. type func to check what we have installed
 2. go to an empty folder > type func init
 3. choose node, choose javascript
 4. go through the generated files
 5. func new, choose http trigger
 6. func start
 7. call it with the browser, specifying a parameter, observe the function logs




Demo (VS code)
-----------------------------------
 - Develop a Function in VS Code ()
 - Why use it: Cross-platform, ok for Linux and MacOS, free, nice dev experience
 - Things to install: Azure Function Core Tools
  
 
 - No storage emulator, but for http functions, we do not need it. Alternatives: Azurite
 - VS Code allows debugging
 - VS Code has an extension for developing Azure Functions

 - node.js installed for our example, cause it will be in javascript
 
 Steps:
 1.  Open command line in the function app root folder
 2.  type code . => Launch VS code in that folder, say yes to the dialog
 3.  Go to the extensions window and observe the installed extensions: Azure Functions (the extension was automatically installed thanks to the file in the .vscode folder)
 4.  Observe the Azure icon in the left-side menu, open it. Icons for adding a new Azure Function and deployment. Resources section -> remote, Workspace section -> local
 5.  In the workspace section >> Functions >> Add a new function to the project
 6.  Select another http trigger, default name HttpTrigger1, Anonymous authorization
 7.  Go to the file explorer and explore the structure, one more folder has been added
 8.  There is a sample.dat file for testing purposes only for the function created by VS Code
 9.  Put a breakpoint in index.js of HttpTrigger1 and press F5
 10. Observe logs in the terminal window: the runtime initializes and the vs code debugger attaches to the Node process
 11. Go to the browser and request the second functions url httptrigger1
 12. We hit the breakpoint.
 13. Pass a query string parameter and hover on the variables


 Demo
 --------------
  - Show the ToDo REST API and explain about routes and how we have built a consistent api



Slide
---------
 - General development concepts: what is function app, triggers, bindings, security etc...
 - Types of functions: ,durable, etc...
 - Function app: unit of deployment, consists of 1 or more functions which: 
		- share common configuration
		- scale together
		- have the same runtime stack






Demo
---------
 - HTTP Trigger function in Visual Studio localhost (C#)
 - HTTP Trigger function in Visual Studio Code (C#)
 - HTTP Trigger function in-portal (js)
 - HTTP Trigger function in Core Tools (C# or js)
 - HTTP function security: api key
 - Unit test an HTTP function function
 ? Proxy http requests to another function?

 




Slide
--------------
Deployment options overview:
	
	- Directly from Visual Studio

	- Continuous deployment from a repo:
			- Bitbucket
			- Dropbox
			- External repository (Git or Mercurial)
			- Git local repository
			- GitHub
			- OneDrive
			- Azure Repo

	- Azure Pipeline

	- Directly on the portal

	- ZIP deployment, using the AzureCLI console or by the ?REST Interface?




Demo
-------------
https://learn.microsoft.com/en-us/training/modules/develop-test-deploy-azure-functions-with-visual-studio/4-publish-azure-functions
Deploy functions created previously in different ways: 

	- Directly from Visual Studio or Visual Studio Code: Create a brand new function or push code to an existing function app
	  Great for prototyping or PoCs

	- ZIP delpoyment, using Azure Cli console
	- Azure Pipeline
	- Azure Repo
	- GitHub Repo or local repo (by webhook?) 


Slide
--------------
Table summary of everything


Slide
--------------
   - Sources 
	  -	https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview
	  - https://learn.microsoft.com/en-us/training/paths/create-serverless-applications/
	  - https://app.pluralsight.com/library/courses/microsoft-azure-serverless-functions-create/table-of-contents


Slide
--------------
   - What to expect in Part 2, topics




Slide
--------------
   - Thanks for your attention









---------------------------------------------------------- AZURE FUNCTIONS: PART 2 ----------------------------------------------

Demo (Bindings, REST API with Table storage)
----------------
 - Table Storage : FunctionApp.TableStorage.RestAPI
 - Cheap for development: TableStorage vs CosmosDB, PartitionKey, RowKey
 - Uses the storage account created along with the function
 - Add nuget packages: Microsoft.Azure.WebJobs.Extensions.Storage, (Microsoft.Azure.WebJobs.Extensions.Tables - not needed)
 - Binding is used as input parameter to the methods in the api
 - Even if we switch off the app and then turn it on again, the entities are persisted!
 - Azure Storage Explorer Tool, downloaded separately, can view local storage accounts as well



 Demo (Bindings REST API with Table Storage, Queue and Blob)
---------------
- Queue triggered function: blob, queue
- FunctionApp.Queue.RestAPI.cproj: 
	- on Todo item creation, post a message to the queue
	- add a queue triggered function to handle these messsages
	- write the received message to the blob storage
- We have queue, blob and table all done with the emulator
- The info persists, it can be explored with the Azure Storage Explorer


Slide
------------
Contents:


Slide
-----------
 - Pros and Cons of using Azure Functions


Slide
----------
 - Cost of Azure Functions


Slide
--------
- Monitoring


Slide
-------
- Deploy with Docker container


Demo
-------
- Timer triggered function
- Possibly move it to Part 1


Demo
-------
- Run functions in containers


 Slide
 --------
  - Possibly move it to Part 1
  - Expose FunctionApps as an API using Azure API Management
  - Benefits of using Azure API Management to compose your API:
	- Integrate different microservices and present them to client applications with consistent behavior at a single URL
	- Requests are forwarded to the right microservice, wherever it's located, and returns responses to users. Users never see the different URIs where microservices are hosted.
	- Usage of API Management policies to enforce consistent rules on all microservices 
	- Monitor the behavior and performance of deployed services
	- Different development team for each app, deploy and test on a different url
	- Importing an Azure Function App as new API or appending them to existing API
