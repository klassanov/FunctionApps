
---------------------------------------------------------- AZURE FUNCTIONS: PART 1 ----------------------------------------------

Slide
------------
Contents:
 - What are Azure functions
 - What is serverless
 - Why use Azure Functions -> Benefits
 -


Slide
-----------
 - Use case scenarios in which functions are a great fit




Slide
---------
 - General development concepts: what is function app, triggers, bindings, security etc...
 - Types of functions




Slide
---------
 Development options overview:
	- Development languages
	- Visual Studio
	- Visual Studio Code
	- In-Portal
	- Azure Core Tools
	- More?
	- What do we need to install in order to be able to develop in each case




Demo
---------
 - HTTP Trigger function in Visual Studio localhost (C#)
 - HTTP Trigger function in Visual Studio Code (C#)
 - HTTP Trigger function in-portal (js)
 - HTTP Trigger function in Core Tools (C# or js)
 - Unit test a function
 




Slide
--------------
Deployment options overview:
	
	- Directly from Visual Studio

	- Continuous deployment from a repo:
			- Bitbucket
			- Dropbox
			- External repository (Git or Mercurial)
			- Git local repository
			- GitHub
			- OneDrive
			- Azure Repo

	- Azure Pipeline

	- Directly on the portal

	- ZIP deployment, using the AzureCLI console or by the ?REST Interface?




Demo
-------------
https://learn.microsoft.com/en-us/training/modules/develop-test-deploy-azure-functions-with-visual-studio/4-publish-azure-functions
Deploy functions created previously in different ways: 

	- Directly from Visual Studio
	- ZIP delpoyment, using Azure Cli console
	- Azure Pipeline
	- Azure Repo
	- GitHub Repo or local repo (by webhook?) 


















---------------------------------------------------------- AZURE FUNCTIONS: PART 2 ----------------------------------------------


Slide
------------
Contents:


Slide
-----------
 - Pros and Cons of using Azure Functions


Slide
----------
 - Cost of Azure Functions


 Slide
 --------
  - Possibly move it to Part 1
  - Expose FunctionApps as an API using Azure API Management
  - Benefits of using Azure API Management to compose your API:
	- Integrate different microservices and present them to client applications with consistent behavior at a single URL
	- Requests are forwarded to the right microservice, wherever it's located, and returns responses to users. Users never see the different URIs where microservices are hosted.
	- Usage of API Management policies to enforce consistent rules on all microservices 
	- Monitor the behavior and performance of deployed services
	- Different development team for each app, deploy and test on a different url
	- Importing an Azure Function App as new API or appending them to existing API
