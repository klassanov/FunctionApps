
---------------------------------------------------------- AZURE FUNCTIONS: PART 1 ----------------------------------------------
Slide
------------
- Who am I


Slide
------------
 - Azure Functions, version 4 Part 1
 - Presentation Contents


Slide
------------
Contents:
 - What are Azure functions?
	- FaaS (function as a service platform): a platform for running code (functions) in response to events, event-driven model



 Slide
------------
 - What is serverless (3 main things)
	
	- Servers are managed for U, U need to provide your code only
		- Servers are abstracted away
	
	- Per-second billing model, consumption-based cost-plan
		- Only pay when your code runs: no run, no cost

	- Automatic scale in response to demand
		- Multiple servers meet the demand

Summarizing: Simpler, Cheaper and More scalable compared to traditional development compared to the traditional approach of creating an application and
hosting it on a dedicated VM


Demo
-----------
- Demo on the Azure Portal directly, first create a function app
- Resources created: 
	- FunctionApp itself
	- AppServicePlan: hosting consumption plan that governs the billing
	- Storage account
	- App Insignt instance

- What is a function app



 Slide
------------
 - Different hosting models (plans), serverless is only one of them, it is related to the consumption plan



  Slide
------------
 - Why use Azure Functions -> Benefits
	- fast development
	- reduce costs
	- automatic scale


Slide
-----------
 - Use case scenarios in which functions are a great fit



Slide
---------
 Development options overview:
	- Development languages: C#, JavaScript, Java, Python, Powershell, F# and....
	- Visual Studio: debug and test locally
	- Visual Studio Code
	- In-Portal: good for Demos, PoC, Experiments
	- Azure Core Tools
	- More?
	- What do we need to install in order to be able to develop in each case

Demo
---------
  - Develop a Function App in Visual Studio
  - Possible languages: C#, F#, Javascript
  - Tools to install: In VS during installation Azure Development Workload,, put a screenshot. It includes the azure storage emulator which locally emulates
    a storage account needed for the function to run

Slide
---------
  - General development concepts
	- Triggers: event-driven, examples: http trigger, timer, message (queue)
	- Bindings: queue, integrate with different sources and destinations without having to write boilerplate code to manage the connection


Slide
---------
 - General development concepts: what is function app, triggers, bindings, security etc...
 - Types of functions: ,durable, etc...
 - Function app: unit of deployment, consists of 1 or more functions which: 
		- share common configuration
		- scale together
		- have the same runtime stack






Demo
---------
 - HTTP Trigger function in Visual Studio localhost (C#)
 - HTTP Trigger function in Visual Studio Code (C#)
 - HTTP Trigger function in-portal (js)
 - HTTP Trigger function in Core Tools (C# or js)
 - HTTP function security: api key
 - Unit test an HTTP function function
 ? Proxy http requests to another function?

 




Slide
--------------
Deployment options overview:
	
	- Directly from Visual Studio

	- Continuous deployment from a repo:
			- Bitbucket
			- Dropbox
			- External repository (Git or Mercurial)
			- Git local repository
			- GitHub
			- OneDrive
			- Azure Repo

	- Azure Pipeline

	- Directly on the portal

	- ZIP deployment, using the AzureCLI console or by the ?REST Interface?




Demo
-------------
https://learn.microsoft.com/en-us/training/modules/develop-test-deploy-azure-functions-with-visual-studio/4-publish-azure-functions
Deploy functions created previously in different ways: 

	- Directly from Visual Studio
	- ZIP delpoyment, using Azure Cli console
	- Azure Pipeline
	- Azure Repo
	- GitHub Repo or local repo (by webhook?) 





Slide
--------------
   - Sources 
	  -	https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview
	  - https://learn.microsoft.com/en-us/training/paths/create-serverless-applications/
	  - https://app.pluralsight.com/library/courses/microsoft-azure-serverless-functions-create/table-of-contents



Slide
--------------
   - What to expect in Part 2




Slide
--------------
   - Thanks for your attention









---------------------------------------------------------- AZURE FUNCTIONS: PART 2 ----------------------------------------------


Slide
------------
Contents:


Slide
-----------
 - Pros and Cons of using Azure Functions


Slide
----------
 - Cost of Azure Functions


Slide
--------
- Monitoring


Slide
-------
- Deploy with Docker container


 Slide
 --------
  - Possibly move it to Part 1
  - Expose FunctionApps as an API using Azure API Management
  - Benefits of using Azure API Management to compose your API:
	- Integrate different microservices and present them to client applications with consistent behavior at a single URL
	- Requests are forwarded to the right microservice, wherever it's located, and returns responses to users. Users never see the different URIs where microservices are hosted.
	- Usage of API Management policies to enforce consistent rules on all microservices 
	- Monitor the behavior and performance of deployed services
	- Different development team for each app, deploy and test on a different url
	- Importing an Azure Function App as new API or appending them to existing API
